import socket
import time
import random

# Gateway information
GATEWAY_HOST = "192.168.0.5"  # Replace with the actual IP address of your gateway
GATEWAY_PORT = 8367  # Replace with the actual port number used by your gateway for TCP communication


def send_temperature_data():
    # Create a TCP socket
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as temp_socket:
        try:
            # Connect to the gateway
            #connect method initiate handshake.
            temp_socket.connect((GATEWAY_HOST, GATEWAY_PORT))
            print("Connected to the gateway.")

            while True:
                # Generate a random temperature value between 20 and 30
                temperature = random.uniform(20, 30)

                # Get the current timestamp in Unix format
                timestamp = int(time.time())

                # Create a message with temperature and timestamp
                message = f"TEMP {timestamp}:{temperature}\r\n"

                # Send the message to the gateway
                temp_socket.sendall(message.encode())
                print(f"Sent: {message}")

                # Wait for a response from the gateway
                response = temp_socket.recv(1024).decode()

                # Parse the response status code
                response_code = int(response.split()[0])

                # Handle the response based on the status code
                if response_code == 200:
                    print("Received a successful response.")
                elif response_code == 400:
                    print("Received a 400 Bad Request response.")
                elif response_code == 500:
                    print("Received a 500 Internal Server Error response.")
                else:
                    print(f"Received an unexpected response with status code {response_code}.")

                # Sleep for 1 second before sending the next value
                time.sleep(1)

        except Exception as e:
            print(f"Error: {e}")
        finally:
            # Close the socket when done
            temp_socket.close()


if __name__ == "__main__":
    send_temperature_data()
